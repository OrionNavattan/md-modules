
include ..\..\utils\.Makefile.win # For $(CONVSYM), $(CBUNDLE) etc


BUILD_DIR ?= ..\..\build\modules\errorhandler-core
SRC_DIR ?= .
CORE_DIR ?= ..\core

ASM68K ?= ..\exec\asm68k.exe
ASFLAGS = /k /m /o c+ /o ws+ /o op+ /o os+ /o ow+ /o oz+ /o oaq+ /o osq+ /o omq+ /p /o ae-

.PHONY:	all release	debug extsym tests clean

all:	release	debug extsym

release:	$(BUILD_DIR)\ErrorHandler.bin $(BUILD_DIR)\ErrorHandler.Blob.asm $(BUILD_DIR)\ErrorHandler.Globals.asm

debug:	$(BUILD_DIR)\ErrorHandler.Debug.bin $(BUILD_DIR)\ErrorHandler.Debug.Blob.asm $(BUILD_DIR)\ErrorHandler.Debug.Globals.asm

# "extsym" build is usuable in assembly blob form only, because it requires additional linkage
extsym:	$(BUILD_DIR)\ErrorHandler.ExtSymbols.Blob.asm $(BUILD_DIR)\ErrorHandler.ExtSymbols.Globals.asm


tests:	release	debug extsym
	make -C ..\mdshell -f Makefile.win
	make -C tests -f .Makefile.win

clean:
	del /q /f $(BUILD_DIR)\*.*


# Raw unlinked binaries

$(BUILD_DIR)\ErrorHandler.bin $(BUILD_DIR)\ErrorHandler.sym &:	$(SRC_DIR)\ErrorHandler.asm $(wildcard $(CORE_DIR)\*.asm) | $(BUILD_DIR)
	$(ASM68K) $(ASFLAGS) $(SRC_DIR)\ErrorHandler.asm, $(BUILD_DIR)\ErrorHandler.bin, $(BUILD_DIR)\ErrorHandler.sym, $(BUILD_DIR)\ErrorHandler.lst

$(BUILD_DIR)\ErrorHandler.Debug.bin $(BUILD_DIR)\ErrorHandler.Debug.sym &:	$(SRC_DIR)\ErrorHandler.asm $(wildcard $(CORE_DIR)\*.asm) | $(BUILD_DIR)
	$(ASM68K) $(ASFLAGS) /e __DEBUG__ $(SRC_DIR)\ErrorHandler.asm, $(BUILD_DIR)\ErrorHandler.Debug.bin, $(BUILD_DIR)\ErrorHandler.Debug.sym, $(BUILD_DIR)\ErrorHandler.Debug.lst

$(BUILD_DIR)\ErrorHandler.ExtSymbols.bin $(BUILD_DIR)\ErrorHandler.ExtSymbols.sym &:	$(SRC_DIR)\ErrorHandler.asm $(wildcard $(CORE_DIR)\*.asm) | $(BUILD_DIR)
	$(ASM68K) $(ASFLAGS) /e _USE_SYMBOL_DATA_REF_=1 /e SymbolData_Ptr=0 $(SRC_DIR)\ErrorHandler.asm, $(BUILD_DIR)\ErrorHandler.ExtSymbols.bin, $(BUILD_DIR)\ErrorHandler.ExtSymbols.sym, $(BUILD_DIR)\ErrorHandler.ExtSymbols.lst


# Global symbol tables

$(BUILD_DIR)\ErrorHandler.Globals.asm:	$(BUILD_DIR)\ErrorHandler.sym | $(BUILD_DIR) $(CONVSYM)
	$(CONVSYM) $^ $@ -output asm -outopt "%s: equ ErrorHandler+$$%X" -inopt "/processLocals-" -filter "__global_.+"

$(BUILD_DIR)\ErrorHandler.Debug.Globals.asm:	$(BUILD_DIR)\ErrorHandler.Debug.sym | $(BUILD_DIR) $(CONVSYM)
	$(CONVSYM) $^ $@ -output asm -outopt "%s: equ ErrorHandler+$$%X" -inopt "/processLocals-" -filter "__global_.+"

$(BUILD_DIR)\ErrorHandler.ExtSymbols.Globals.asm:	$(BUILD_DIR)\ErrorHandler.ExtSymbols.sym | $(BUILD_DIR) $(CONVSYM)
	$(CONVSYM) $^ $@ -output asm -outopt "%s: equ ErrorHandler+$$%X" -inopt "/processLocals-" -filter "__global_.+"


# Linkable blobs in assembly format

$(BUILD_DIR)\ErrorHandler.Blob.asm:	$(BUILD_DIR)\ErrorHandler.bin $(BUILD_DIR)\ErrorHandler.SymbolTable.log | $(BUILD_DIR)
	$(BLOBTOASM) $(BUILD_DIR)\ErrorHandler.bin $@ -m $(SRC_DIR)\inject-tables\ErrorHandler.Blob.txt -t $(BUILD_DIR)\ErrorHandler.SymbolTable.log

$(BUILD_DIR)\ErrorHandler.Debug.Blob.asm:	$(BUILD_DIR)\ErrorHandler.Debug.bin $(BUILD_DIR)\ErrorHandler.Debug.SymbolTable.log | $(BUILD_DIR)
	$(BLOBTOASM) $(BUILD_DIR)\ErrorHandler.Debug.bin $@ -m $(SRC_DIR)\inject-tables\ErrorHandler.Blob.txt -t $(BUILD_DIR)\ErrorHandler.Debug.SymbolTable.log

$(BUILD_DIR)\ErrorHandler.ExtSymbols.Blob.asm:	$(BUILD_DIR)\ErrorHandler.ExtSymbols.bin $(BUILD_DIR)\ErrorHandler.ExtSymbols.SymbolTable.log | $(BUILD_DIR)
	$(BLOBTOASM) $(BUILD_DIR)\ErrorHandler.ExtSymbols.bin $@ -m $(SRC_DIR)\inject-tables\ErrorHandler.ExtSymbols.Blob.txt -t $(BUILD_DIR)\ErrorHandler.ExtSymbols.SymbolTable.log


$(BUILD_DIR)\ErrorHandler.SymbolTable.log:	$(BUILD_DIR)\ErrorHandler.sym | $(CONVSYM)
	$(CONVSYM) $^ $@ -output asm -inopt "/processLocals-" -outopt "%s: %X"

$(BUILD_DIR)\ErrorHandler.Debug.SymbolTable.log:	$(BUILD_DIR)\ErrorHandler.Debug.sym | $(CONVSYM)
	$(CONVSYM) $^ $@ -output asm -inopt "/processLocals-" -outopt "%s: %X"

$(BUILD_DIR)\ErrorHandler.ExtSymbols.SymbolTable.log:	$(BUILD_DIR)\ErrorHandler.ExtSymbols.sym | $(CONVSYM)
	$(CONVSYM) $^ $@ -output asm -inopt "/processLocals-" -outopt "%s: %X"


$(BUILD_DIR):
	-md $(BUILD_DIR)
